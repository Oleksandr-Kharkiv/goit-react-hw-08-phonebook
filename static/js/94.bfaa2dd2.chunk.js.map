{"version":3,"file":"static/js/94.bfaa2dd2.chunk.js","mappings":"4QAEaA,EAAuBC,EAAAA,EAAAA,KAAH,8QAYpBC,EAAYD,EAAAA,EAAAA,MAAH,iKAQTE,EAAYF,EAAAA,EAAAA,MAAH,0XAeTG,EAAoBH,EAAAA,EAAAA,OAAH,ga,UCgC9B,EA1DoB,WAClB,IAAMI,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,IAAYC,EAAAA,IAC3BC,GAAcC,EAAAA,EAAAA,MACdC,GAAgBD,EAAAA,EAAAA,MAyBpB,OACE,+BACE,UAACX,EAAD,CAAsBa,SAzBL,SAAAC,GACnBA,EAAEC,iBAEF,IAAMC,EAAOF,EAAEG,OACTC,EAAUF,EAAKG,SAASC,KAAKC,MAMnC,GAJqBd,EAAWe,MAC9B,SAAAC,GAAO,OAAIA,EAAQH,KAAKI,gBAAkBN,EAAQM,aAA3C,KAGyB,KAAZN,EAGpB,OAFAF,EAAKS,aACLC,MAAM,GAAD,OAAIR,EAAJ,4BAEC,IAAMS,EAAa,CACzBP,KAAMJ,EAAKG,SAASC,KAAKC,MACzBO,OAAQZ,EAAKG,SAASS,OAAOP,OAE/BhB,GAASwB,EAAAA,EAAAA,IAAWF,IACpBX,EAAKS,OAEN,EAIiDK,aAAa,MAA3D,WACE,SAAC5B,EAAD,CAAW6B,QAASrB,EAApB,mBACA,SAACP,EAAD,CACE6B,GAAItB,EACJuB,KAAK,OACLb,KAAK,OACLc,QAAQ,+BACRC,MAAM,yIACNC,UAAQ,KAGV,SAAClC,EAAD,CAAW6B,QAASnB,EAApB,qBACA,SAACT,EAAD,CACE6B,GAAIpB,EACJqB,KAAK,MACLb,KAAK,SACLc,QAAQ,8BACRC,MAAM,+FACNC,UAAQ,KAGV,SAAChC,EAAD,CAAmB6B,KAAK,SAAxB,gCAIP,ECjEYI,EAAuBpC,EAAAA,EAAAA,GAAH,ySCApBqC,EAAmBrC,EAAAA,EAAAA,GAAH,gOAShBsC,EAAatC,EAAAA,EAAAA,EAAH,kLAOVuC,EAAcvC,EAAAA,EAAAA,KAAH,sBAEXwC,EAAgBxC,EAAAA,EAAAA,OAAH,2VCK1B,GDS8BA,EAAAA,EAAAA,OAAH,2VCxBX,SAAC,GAA0B,IAAxB+B,EAAuB,EAAvBA,GAAIZ,EAAmB,EAAnBA,KAAMQ,EAAa,EAAbA,OACrBvB,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAACgC,EAAD,YACE,UAACE,EAAD,WACGpB,EADH,MACU,SAACmB,EAAD,CAAYG,KAAK,iBAAjB,SAAmCd,QAE3C,SAACa,EAAD,CAAeE,QAAS,kBAAMtC,GAASuC,EAAAA,EAAAA,IAAcZ,GAA7B,EAAxB,sBAJmBA,EAS1B,GCQD,EAzBoB,WAClB,IAAMa,GAAUrC,EAAAA,EAAAA,IAAYsC,EAAAA,IAU5B,OACE,SAACT,EAAD,UACGQ,EAAQE,KAAI,gBAAEf,EAAF,EAAEA,GAAIZ,EAAN,EAAMA,KAAMQ,EAAZ,EAAYA,OAAZ,OACX,SAAC,EAAD,CAEEI,GAAIA,EACJZ,KAAMA,EACNQ,OAAQA,GAHHI,EAFI,KAUlB,E,UC3BYgB,EAAkB/C,EAAAA,EAAAA,IAAH,sSAafgD,EAAchD,EAAAA,EAAAA,MAAH,iKAQXiD,EAAcjD,EAAAA,EAAAA,MAAH,2XCUxB,EA5Be,WACb,IAAMI,GAAWC,EAAAA,EAAAA,MACX6C,GAAgBxC,EAAAA,EAAAA,MAOtB,OACE,+BACA,UAACqC,EAAD,YACE,SAACC,EAAD,sBACA,SAACC,EAAD,CACElB,GAAImB,EACJlB,KAAK,OACLb,KAAK,SACLgC,SAbe,SAAAtC,GACnB,IAAIuC,EAAWvC,EAAEG,OAAOI,MAAMiC,OAC9BjD,GAASkD,EAAAA,EAAAA,IAAaF,GACvB,EAWKnB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRN,aAAa,YAKpB,E,UCJD,EAnBqB,WACnB,IAAM0B,GAAYhD,EAAAA,EAAAA,IAAYiD,EAAAA,IACxBC,GAAQlD,EAAAA,EAAAA,IAAYmD,EAAAA,IACpBtD,GAAWC,EAAAA,EAAAA,MAMjB,OAJAsD,EAAAA,EAAAA,YAAU,WACRvD,GAASwD,EAAAA,EAAAA,MACV,GAAC,CAACxD,KAGD,iCACE,SAAC,EAAD,KACA,SAAC,EAAD,IACCmD,IAAcE,IAAS,mDACxB,SAAC,EAAD,MAGL,C","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/Contact/Contacts.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/Pages/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactFormComponent = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    padding: 30px;\n    max-width: 450px;\n    height: auto;\n    border-radius: 5px;\n    background-color: var(--background-color-component);\n    box-shadow: var(--box-shadow);\n`\n\nexport const FormLabel = styled.label`\n    font-size: 20px;\n    font-weight: 700;\n    line-height: calc(26/20);\n    letter-spacing: .05em;\n    color: var(--accent-color);\n`\n\nexport const FormInput = styled.input`\n    margin: 0;\n    padding: 7px 5px 5px;\n    text-align: center;\n    font-size: 20px;\n    font-weight: 600;\n    line-height: calc(26/20);\n    letter-spacing: .05em;\n    border-radius: 5px;\n    color: var(--second-text-color);\n    background-color: var(--background-color);\n    box-shadow: var(--box-shadow-inset); \n    border-color: inherit;\n`     \n\nexport const FormAddContactBtn = styled.button`\n     width: 100%;\n    cursor: pointer;\n    padding: 10px;\n    border-radius: 5px;\n    border-color: inherit;\n    background-color: var(--background-color);\n    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.16); \n    text-transform: capitalize;\n    font-weight: 600;\n    font-size: 16px;\n    color: var(--first-text-color);\n    &:active { \n        color: var(--second-text-color);\n    }  \n`\n","import { useDispatch, useSelector } from 'react-redux'; //  для відправки та отримання даних з лобального state\nimport { nanoid } from '@reduxjs/toolkit'; //  для генерації випадкових ID номерів\nimport { addContact } from 'redux/operations';\nimport {\n  ContactFormComponent,\n  FormLabel,\n  FormInput,\n  FormAddContactBtn,\n} from './ContactForm.styled';\nimport { selectContacts } from 'redux/selectors';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();  /* отримую посилання на метод useDispatch() для відправки даних у глобальний state */\n  const myContacts = useSelector(selectContacts);  /* отримую масив об'єктів (контактів) з глобального state */\n  let nameInputId = nanoid();\n  let numberInputId = nanoid();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const newName = form.elements.name.value;\n\n    let isInMyContacts = myContacts.find(\n      contact => contact.name.toLowerCase() === newName.toLowerCase()\n    );\n\n    if (isInMyContacts || newName === \"\") {\n      form.reset();\n      alert(`${newName} is already in contacts`);\n      return \n    } else {const newContact = {\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    }\n    dispatch(addContact(newContact));\n    form.reset();\n  }\n  };\n\n  return (\n    <>\n      <ContactFormComponent onSubmit={handleSubmit} autoComplete=\"off\">\n        <FormLabel htmlFor={nameInputId}>Name</FormLabel>\n        <FormInput\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[A-Za-z\\u0080-\\uFFFF ']+$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n\n        <FormLabel htmlFor={numberInputId}>Number</FormLabel>\n        <FormInput\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"^(\\+?[0-9.\\(\\)\\-\\s]*)$\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n\n        <FormAddContactBtn type=\"submit\">Add to contact</FormAddContactBtn>\n      </ContactFormComponent>\n    </>\n  );\n};\n\nexport default ContactForm\n\n\n\n// ----------------------------------------Функціональні копоненти-------------\n\n// import PropTypes from 'prop-types';\n// import { useState } from 'react';\n// import { nanoid } from 'nanoid';\n// import {\n//   ContactFormComponent,\n//   FormLabel,\n//   FormInput,\n//   FormAddContactBtn,\n// } from './ContactForm.styled';\n\n// export const ContactForm = ({ onSubmitForm }) => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n\n//   let nameInputId = nanoid();\n//   let numberInputId = nanoid();\n\n//   const handleInputChange = e => {\n//     const { name, value } = e.target;\n//     if (name === 'name') setName(value);\n//     if (name === 'number') setNumber(value);\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     onSubmitForm({ name, number });\n//     reset();\n//   };\n\n//   const reset = () => {\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <>\n//       <ContactFormComponent onSubmit={handleSubmit} autoComplete=\"off\">\n//         <FormLabel htmlFor={nameInputId}>Name</FormLabel>\n//         <FormInput\n//           id={nameInputId}\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           onChange={handleInputChange}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//         />\n\n//         <FormLabel htmlFor={numberInputId}>Number</FormLabel>\n//         <FormInput\n//           id={numberInputId}\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           onChange={handleInputChange}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//         />\n\n//         <FormAddContactBtn type=\"submit\">Add to contact</FormAddContactBtn>\n//       </ContactFormComponent>\n//     </>\n//   );\n// };\n\n// ContactForm.propTypes = {\n//   onSubmitForm: PropTypes.func.isRequired,\n// };\n\n// -------------------------------------------Класові компоненти--------------------\n\n// import React, { Component } from 'react';\n// import { nanoid } from 'nanoid';\n// import {ContactFormComponent, FormLabel, FormInput, FormAddContactBtn} from './ContactForm.styled';\n\n// export class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = nanoid();\n//   numberInputId = nanoid();\n\n//   handleInputChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <ContactFormComponent onSubmit={this.handleSubmit} autoComplete=\"off\">\n//           <FormLabel htmlFor={this.nameInputId}>Name</FormLabel>\n//           <FormInput\n//             id={this.nameInputId}\n//             type=\"text\"\n//             name=\"name\"\n//             value={this.state.name}\n//             onChange={this.handleInputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n\n//           <FormLabel htmlFor={this.numberInputId}>Number</FormLabel>\n//           <FormInput\n//             id={this.numberInputId}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={this.state.number}\n//             onChange={this.handleInputChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n\n//           <FormAddContactBtn type=\"submit\">\n//             Add to contact\n//           </FormAddContactBtn>\n//         </ContactFormComponent>\n//       </>\n//     );\n//   }\n// }\n\n// ========================== варіант css-модулі ==================\n\n// import React, { Component } from 'react';\n// import { nanoid } from 'nanoid';\n// import css from './ContactForm.module.css';\n\n// export class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   nameInputId = nanoid();\n//   numberInputId = nanoid();\n\n//   handleInputChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <form onSubmit={this.handleSubmit} autoComplete=\"off\">\n//           <label htmlFor={this.nameInputId}>Name</label>\n//           <input\n//             id={this.nameInputId}\n//             type=\"text\"\n//             name=\"name\"\n//             value={this.state.name}\n//             onChange={this.handleInputChange}\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//             required\n//           />\n\n//           <label htmlFor={this.numberInputId}>Number</label>\n//           <input\n//             id={this.numberInputId}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={this.state.number}\n//             onChange={this.handleInputChange}\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//             required\n//           />\n\n//           <button type=\"submit\" className={css.btn}>\n//             Add to contact\n//           </button>\n//         </form>\n//       </>\n//     );\n//   }\n// }\n","import styled from '@emotion/styled';\n\nexport const ContactListComponent = styled.ul`\n    margin: 3px 0 0;\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    padding: 20px 30px;\n    max-width: 450px;\n    height: auto;\n    border-radius: 5px;\n    background-color: var(--background-color-component);\n    box-shadow: var(--box-shadow);\n`","import styled from '@emotion/styled';\n\nexport const ContactComponent = styled.li`\n  display: flex;\n  justify-content: space-between;\n  gap: 15px;\n  font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  font-size: 18px;\n  color: var(--second-text-color);\n`;\n\nexport const ContactTel = styled.a`\n  text-decoration: none;\n  font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;\n  font-size: 18px;\n  color: var(--accent-color);\n`;\n\nexport const ContactName = styled.span``;\n\nexport const DelContactBtn = styled.button`\n  cursor: pointer;\n  border-radius: 5px;\n  border-color: inherit;\n  background-color: var(--background-color);\n  box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.16);\n  text-transform: capitalize;\n  font-weight: 600;\n  font-size: 12px;\n  color: var(--first-text-color);\n  &:active {\n    color: var(--second-text-color);\n  }\n`;\nexport const EditContactBtn = styled.button`\n  cursor: pointer;\n  border-radius: 5px;\n  border-color: inherit;\n  background-color: var(--background-color);\n  box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.16);\n  text-transform: capitalize;\n  font-weight: 600;\n  font-size: 12px;\n  color: var(--first-text-color);\n  &:active {\n    color: var(--second-text-color);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport {\n  ContactComponent,\n  ContactTel,\n  DelContactBtn,\n  ContactName,\n} from './Contacts.styled';\n\nconst Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactComponent key={id}>\n      <ContactName>\n        {name}: <ContactTel href=\"tel:({number})\">{number}</ContactTel>\n      </ContactName>\n        <DelContactBtn onClick={() => dispatch(deleteContact(id))}>\n          Delete\n        </DelContactBtn>\n    </ContactComponent>\n  );\n};\n\nexport default Contact;\n\nContact.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\n// ========================== варіант css-модулі ==================\n\n// import PropTypes from 'prop-types';\n// import css from './Contact.module.css';\n\n// export const Contact = ({ id, name, number, deleteContact }) => {\n//   return (\n//     <li className={css.contactItem} key={id}>\n//       <span>\n//         {name}:{' '}\n//         <a href=\"tel:({number})\" className={css.tel}>\n//           {number}\n//         </a>\n//       </span>\n//       <button className={css.btnDel} onClick={() => deleteContact(id)}>\n//         Delete\n//       </button>\n//     </li>\n//   );\n// };\n\n// Contact.propTypes = {\n//   id: PropTypes.string.isRequired,\n//   name: PropTypes.string.isRequired,\n//   number: PropTypes.string.isRequired,\n//   deleteContact: PropTypes.func.isRequired,\n// };\n","import { useSelector } from \"react-redux\";\n// import { getContacts, getFilter } from 'redux/selectors'; /*--- варіант зі старими селекторами--------*/\nimport { selectVisibleContacts } from 'redux/selectors'; \nimport { ContactListComponent } from './ContactList.styled';\nimport Contact from '../Contact/Contact';\n\nconst ContactList = () => {\n  const filtred = useSelector(selectVisibleContacts); /*------ логіка фільтрації винесена в selector */\n\n  /*-----------------------------hw-07--- варіант зі старими селекторами--------*/\n  // const contacts = useSelector(getContacts);\n  // const stateFilter = useSelector(getFilter);\n  // const normalizedFilter = stateFilter.toLowerCase();\n  // const filtred = contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  // );\n \n  return (\n    <ContactListComponent>\n      {filtred.map(({id, name, number}) => (\n        <Contact\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          />\n      ))}\n    </ContactListComponent>\n  );\n};\n\nexport default ContactList\n\n\n// ========================== варіант css-модулі ==================\n\n// import PropTypes from 'prop-types';\n// import { Contact } from '../Contact/Contact';\n// import css from './ContactList.module.css';\n\n// export const ContactList = ({ contacts, deleteContact }) => {\n//   return (\n//     <ul className={css.contactList}>\n//       {contacts.map(contact => (\n//         <Contact\n//           key={contact.id}\n//           id={contact.id}\n//           name={contact.name}\n//           number={contact.number}\n//           deleteContact={deleteContact}\n//         />\n//       ))}\n//     </ul>\n//   );\n// };\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.exact({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.string.isRequired,\n//     })\n//   ),\n//   deleteContact: PropTypes.func.isRequired,\n// };\n","import styled from '@emotion/styled';\n\nexport const FilterComponent = styled.div`\n    margin-top: 3px;\n    display: flex;\n    align-items: center;\n    gap: 15px;\n    padding: 20px 30px;\n    max-width: 450px;\n    height: auto;\n    border-radius: 5px;\n    background-color: var(--background-color-component);\n    box-shadow: var(--box-shadow);\n`\n\nexport const FilterLabel = styled.label`\n    font-size: 20px;\n    font-weight: 700;\n    line-height: calc(26/20);\n    letter-spacing: .05em;\n    color: var(--accent-color);\n`\n\nexport const FilterInput = styled.input`\n    margin: 0;\n    padding: 7px 5px 5px;\n    text-align: center;\n    font-size: 18px;\n    font-weight: 600;\n    line-height: calc(20/18);\n    letter-spacing: .05em;\n    border-radius: 5px;\n    color: var(--second-text-color);\n    background-color: var(--background-color);\n    box-shadow: var(--box-shadow-inset); \n    border-color: inherit; \n`","import { nanoid } from '@reduxjs/toolkit';\nimport { useDispatch} from 'react-redux';\nimport { setNewFilter } from 'redux/filterSlice';\nimport { FilterComponent, FilterLabel, FilterInput } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterInputId = nanoid();\n\n  const changeFilter = e => {\n    let newQuery = e.target.value.trim();\n    dispatch(setNewFilter(newQuery));\n  };\n  \n  return (\n    <>\n    <FilterComponent>\n      <FilterLabel>Filter</FilterLabel>\n      <FilterInput\n        id={filterInputId}\n        type=\"text\"\n        name=\"filter\"\n        onChange={changeFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        autoComplete=\"off\"\n      />\n    </FilterComponent>\n    </>\n  );\n};\n\nexport default Filter\n\n\n\n\n// ========================== варіант css-модулі ==================\n\n// import PropTypes from 'prop-types';\n// import { nanoid } from 'nanoid';\n// import css from './Filter.module.css';\n\n// const filterInputId = nanoid();\n\n// export const Filter = ({ onChange, filter }) => {\n//   return (\n//     <div className={css.wrap}>\n//       <label htmlFor={filterInputId}>Filter</label>\n//       <input\n//         id={filterInputId}\n//         type=\"text\"\n//         name=\"filter\"\n//         value={filter}\n//         onChange={onChange}\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//         required\n//       />\n//     </div>\n//   );\n// };\n\n// Filter.propTypes = {\n//   onChange: PropTypes.func.isRequired,\n//   filter: PropTypes.string.isRequired,\n// };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/selectors';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/operations';\n\nconst ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch()\n  \n  useEffect(()=>{\n    dispatch(fetchContacts())\n  },[dispatch])\n  \n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactFormComponent","styled","FormLabel","FormInput","FormAddContactBtn","dispatch","useDispatch","myContacts","useSelector","selectContacts","nameInputId","nanoid","numberInputId","onSubmit","e","preventDefault","form","target","newName","elements","name","value","find","contact","toLowerCase","reset","alert","newContact","number","addContact","autoComplete","htmlFor","id","type","pattern","title","required","ContactListComponent","ContactComponent","ContactTel","ContactName","DelContactBtn","href","onClick","deleteContact","filtred","selectVisibleContacts","map","FilterComponent","FilterLabel","FilterInput","filterInputId","onChange","newQuery","trim","setNewFilter","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts"],"sourceRoot":""}